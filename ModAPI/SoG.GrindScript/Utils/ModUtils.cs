using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.IO;

namespace SoG.Modding.Utils
{
    /// <summary>
    /// Provides various helper methods.
    /// </summary>
    public static class ModUtils
    {
        /// <summary>
        /// Tries to create a directory, ignoring any exceptions thrown.
        /// </summary>
        public static bool TryCreateDirectory(string name)
        {
            try
            {
                Directory.CreateDirectory(name);
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Returns true if the mod path starts with "ModContent\", false otherwise.
        /// </summary>
        public static bool IsModContentPath(string assetPath)
        {
            return assetPath.Trim().Replace('/', '\\').StartsWith("ModContent\\");
        }

        /// <summary>
        /// For audio IDs generated by GrindScript, extracts relevant information.
        /// Returns true on success, false otherwise.
        /// </summary>
        internal static bool SplitAudioID(string ID, out int entryID, out bool isMusic, out int cueID)
        {
            entryID = -1;
            isMusic = false;
            cueID = -1;

            if (!ID.StartsWith("GS_"))
                return false;

            string[] words = ID.Remove(0, 3).Split('_');

            if (words.Length != 2 || !(words[1][0] == 'M' || words[1][0] == 'S'))
                return false;

            try
            {
                entryID = int.Parse(words[0]);
                isMusic = words[1][0] == 'M';
                cueID = int.Parse(words[1].Substring(1));

                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Splits a message in words, removing any empty results.
        /// </summary>
        public static string[] GetArgs(string message)
        {
            return message == null ? new string[0] : message.Split(new char[] { ' ' }, options: StringSplitOptions.RemoveEmptyEntries);
        }

        /// <summary>
        /// Finds and replaces commonly occuring game paths with shortened forms.
        /// </summary>
        public static string ShortenModPaths(string path)
        {
            return path
                .Replace('/', '\\')
                .Replace(Directory.GetCurrentDirectory() + @"\Content\ModContent", "(ModContent)")
                .Replace(Directory.GetCurrentDirectory() + @"\Content\Mods", "(Mods)")
                .Replace(Directory.GetCurrentDirectory() + @"\Content", "(Content)")
                .Replace(Directory.GetCurrentDirectory(), "(SoG)");
        }
    }
}
